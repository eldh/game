{"version":3,"sources":["Players.js","Game.js","roundCalc.js","GameOn.js","scoreCalc.js","Results.js","Settings.js","App.js","serviceWorker.js","index.js"],"names":["Players","players","setPlayers","unavailablePlayers","setUnavailablePlayers","toggleUnavailable","p","arr","i","findIndex","x","remove","map","isAvailable","className","key","onClick","length","autoComplete","onSubmit","e","preventDefault","name","target","querySelector","value","c","id","type","Game","game","court","setResult","style","width","pair","height","set","res","j","toString","onChange","position","parseInt","r","require","shuffle","knuthShuffle","mapIndexed","addIndex","makeGame","curry","hasMet","games","one","two","any","contains","hasPlayedTogether","playersForRound","courts","sorted","sort","p1","p2","noOfGames","slice","player","gamesForPlayer","scoreGame","playedGames","g","hasMetAlready","makeSingleRound","usedCourts","Math","min","floor","range","allPairs","concat","apply","allOthers","playersCopy","scoreRound","round","reduce","sum","filter","flatten","makeNextRound","availablePlayers","roundSamples","Promise","resolve","sortedGames","depth","filteredGames","Infinity","append","val","reject","allUniq","head","sortBy","getBestRound","allGames","makeFirstRound","insert","n","GameOn","settings","rounds","setRounds","React","useState","loading","setLoading","makeRound","rebootLastRound","a","async","flat","newRounds","roundPlayers","resting","includes","newGame","roundIndex","gameIndex","setGame","join","disable","scoreForPlayer","gameCount","team","score","winner","winBonus","onlyCountOwnPoints","scoreForGame","getScore","scoredPlayers","s1","sortPlayersByScore","Results","results","s","Settings","setSettings","v","checked","useRoundsState","createPersistedState","usePlayersState","useUnavailablePlayersState","useSettingsState","App","find","marginLeft","window","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8bbc00c.chunk.js","sourcesContent":["import React from 'react'\nimport { remove, findIndex } from 'ramda'\n\nexport function Players({ players, setPlayers, unavailablePlayers, setUnavailablePlayers }) {\n  let toggleUnavailable = p => {\n    setUnavailablePlayers(arr => {\n      let i = findIndex(x => x === p, arr)\n      let isUnavailable = i > -1\n      return isUnavailable ? remove(i, 1, arr) : [...arr, p]\n    })\n  }\n  return (\n    <>\n      <div>\n        {players.map(p => {\n          let isAvailable = findIndex(x => x === p, unavailablePlayers) === -1\n          return (\n            <div className={'row m0 ' + (isAvailable ? '' : 'u')} key={p}>\n              {p}\n              {isAvailable && <span onClick={() => toggleUnavailable(p)}>ⓧ</span>}\n            </div>\n          )\n        })}\n        {unavailablePlayers.length ? (\n          <>\n            <h3>Ej tillgängliga</h3>\n            {unavailablePlayers.map(p => (\n              <div className=\"row m0\" key={p}>\n                {p}\n                {<span onClick={() => toggleUnavailable(p)}>ⓧ</span>}\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n      <form\n        autoComplete=\"off\"\n        onSubmit={e => {\n          e.preventDefault()\n          let name = e.target.querySelector('#name').value\n          e.target.querySelector('#name').value = ''\n          name && setPlayers(c => [...c, name])\n        }}\n      >\n        <div className=\"row c m0\">\n          <label>Namn</label>\n          <input id=\"name\" type=\"text\" />\n        </div>\n        <button>Lägg till spelare</button>\n      </form>\n    </>\n  )\n}\n","import React from 'react'\n\nexport function Game({ game, court, setResult }) {\n  let handleInput = position => e => {\n    let value = parseInt(e.target.value || 0)\n    setResult({ position, value })\n  }\n  return (\n    <div className=\"row m0\">\n      <div style={{ width: '200px' }} className=\"m0\">\n        <div>Bana {court + 1}</div>\n        {[game[0], game[1]].map(pair => (\n          <div key={pair[0]} style={{ height: '30px' }}>\n            {pair[0]}\n            <br />\n            {pair[1]}\n          </div>\n        ))}\n      </div>\n      {game[2].map((set, i) => (\n        <div key={i}>\n          <div>Set {i + 1}</div>\n          {set.map((res, j) => (\n            <input key={j} type=\"number\" value={res.toString()} onChange={handleInput([i, j])} />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n","/* eslint-disable no-console, no-loop-func, prefer-spread */\n// require('babel-register')\nconst r = require('ramda')\nconst shuffle = require('knuth-shuffle').knuthShuffle\nconst mapIndexed = r.addIndex(r.map)\n\nconst makeGame = r.curry(p => {\n  return [\n    [p[0], p[1]],\n    [p[2], p[3]],\n    [\n      [0, 0],\n      [0, 0],\n    ],\n  ]\n})\n\nconst hasMet = r.curry((games, one, two) => {\n  const hasMetInGame = game => {\n    return (\n      (r.contains(one, game[0]) && r.contains(two, game[1])) ||\n      (r.contains(one, game[1]) && r.contains(two, game[0]))\n    )\n  }\n  return r.any(hasMetInGame, games)\n})\n\nconst hasPlayedTogether = r.curry((games, one, two) => {\n  const hasPlayedTogetherInGame = game => {\n    return (\n      (r.contains(one, game[0]) && r.contains(two, game[0])) ||\n      (r.contains(one, game[1]) && r.contains(two, game[1]))\n    )\n  }\n  return r.any(hasPlayedTogetherInGame, games)\n})\n\nconst playersForRound = r.curry((courts, games, players) => {\n  const sorted = r.sort((p1, p2) => {\n    return noOfGames(games, p1) - noOfGames(games, p2)\n  }, players)\n  return shuffle(sorted.slice(0, 4 * courts))\n})\n\n// const availablePlayers = r.curry((initial, unavailable) => {\n//   const isUnavailable = r.contains(r.__, unavailable)\n//   return r.reject(isUnavailable, initial)\n// })\n\nconst noOfGames = (games, player) => {\n  return gamesForPlayer(games, player).length\n}\n\nconst scoreGame = r.curry((playedGames, g) => {\n  const playedTogetherWeight = 75\n  const metWeight = 25\n  const hasMetAlready = hasMet(playedGames)\n  const togetherScore =\n    playedTogetherWeight *\n    (hasPlayedTogether(playedGames, g[0][0], g[0][1]) * 1 +\n      hasPlayedTogether(playedGames, g[0][0], g[0][1]) * 1)\n  const metScore =\n    metWeight *\n    (hasMetAlready(g[0][0], g[1][0]) * 1 +\n      hasMetAlready(g[0][0], g[1][1]) * 1 +\n      hasMetAlready(g[0][1], g[1][0]) * 1 +\n      hasMetAlready(g[0][1], g[1][1]) * 1)\n\n  return togetherScore + metScore\n})\n\nconst makeSingleRound = r.curry((courts, players) => {\n  const usedCourts = Math.min(courts, Math.floor(players.length / 4))\n  return r.map(i => {\n    return makeGame(players.slice(i * 4, (i + 1) * 4))\n  }, r.range(0, usedCourts))\n})\n\nconst makePairs = (one, allOthers) => {\n  return r.map(r.pair(one), allOthers)\n}\n\nconst allPairs = players => {\n  return [].concat.apply(\n    [],\n    mapIndexed((p, i) => {\n      const playersCopy = players.slice(0)\n      return makePairs(p, playersCopy.slice(i + 1))\n    }, players)\n  )\n}\n\nconst allGames = players => {\n  return r.filter(game => r.allUniq(r.flatten(game)), allPairs(allPairs(players)))\n}\n\nconst filterOutGamesWithPlayers = (games, players) => {\n  const playersIsInGame = game => {\n    return !r.allUniq(r.flatten(players.concat(game)))\n  }\n  return r.reject(playersIsInGame, games)\n}\n\nconst getBestRound = (roundSamples, sortedGames, depth, playedGames) => {\n  let filteredGames = sortedGames\n  let res = []\n  for (let i = 0; i < roundSamples; i++) {\n    filteredGames = r.slice(i, Infinity, sortedGames)\n    res = r.append(\n      r.reduce(\n        val => {\n          filteredGames = filterOutGamesWithPlayers(filteredGames, r.flatten(val))\n          if (!filteredGames.length) return val\n          return r.append(r.head(filteredGames), val)\n        },\n        [],\n        r.range(0, depth)\n      ),\n      res\n    )\n  }\n  return r.head(\n    r.sortBy(\n      scoreRound(playedGames),\n      r.filter(round => round.length === depth, res)\n    )\n  )\n}\n\nconst scoreRound = r.curry((games, round) => {\n  return r.reduce(\n    (sum, game) => {\n      return sum + scoreGame(games, game)\n    },\n    0,\n    round\n  )\n})\n\nconst gamesForPlayer = r.curry((games, player) => {\n  return r.filter(g => {\n    return r.contains(player, r.flatten(g))\n  }, games)\n})\n\nexport const makeNextRound = ({ courts, players, availablePlayers, playedGames, roundSamples }) => {\n  const usedCourts = Math.min(courts, Math.floor(availablePlayers.length / 4))\n\n  return Promise.resolve(\n    r.map(\n      game => [\n        ...game,\n        [\n          [0, 0],\n          [0, 0],\n        ],\n      ],\n      getBestRound(\n        roundSamples,\n        allGames(playersForRound(usedCourts, playedGames, availablePlayers)),\n        usedCourts,\n        playedGames\n      )\n    )\n  )\n}\n\nexport const makeFirstRound = ({ availablePlayers, courts }) => {\n  return Promise.resolve(makeSingleRound(courts, shuffle(availablePlayers)))\n}\n","import React from 'react'\nimport { Game } from './Game'\nimport { makeFirstRound, makeNextRound } from './roundCalc'\n\nlet insert = ([i, j], val, arr) => {\n  let n = [...arr]\n  n[i][j] = val\n  return n\n}\n\nexport function GameOn({ settings, players, availablePlayers, rounds, setRounds }) {\n  let [loading, setLoading] = React.useState(false)\n  // console.log('rounds', JSON.stringify(rounds))\n\n  let makeRound = rounds.length ? makeNextRound : makeFirstRound\n  let newRound = async () => {\n    setLoading(true)\n    let round = await makeRound({\n      ...settings,\n      availablePlayers,\n      players,\n      playedGames: rounds.flat(),\n    })\n    setRounds(r => [...r, round])\n  }\n  let setGame = (roundIndex, gameIndex, game) =>\n    setRounds(r => {\n      return insert([roundIndex, gameIndex], game, r)\n    })\n\n  let rebootLastRound = async () => {\n    let makeRound = rounds.length > 1 ? makeNextRound : makeFirstRound\n    let round = await makeRound({\n      ...settings,\n      availablePlayers,\n      players,\n      playedGames: rounds.flat(),\n    })\n    setRounds(rounds => {\n      let newRounds = [...rounds]\n      newRounds[rounds.length - 1] = round\n      return newRounds\n    })\n  }\n  return (\n    <>\n      {rounds.map((round, j) => {\n        let roundPlayers = round.reduce((arr, game, i) => [...arr, ...game[0], ...game[1]], [])\n\n        let resting = players.filter(p => !roundPlayers.includes(p))\n\n        return (\n          <div key={j} className=\"m0\">\n            <h3>\n              Omgång {j + 1}\n              {j === rounds.length - 1 ? <span onClick={rebootLastRound}>↪</span> : null}\n            </h3>\n            {round.map((game, i) => (\n              <Game\n                key={i}\n                game={game}\n                setResult={({ position, value }) => {\n                  let newGame = [...game]\n                  // if (!newGame[2]) {\n                  //   newGame[2] = [\n                  //     [0, 0],\n                  //     [0, 0],\n                  //   ]\n                  // }\n                  newGame[2][position[0]][position[1]] = parseInt(value)\n                  setGame(j, i, newGame)\n                }}\n                court={i}\n              />\n            ))}\n            {resting.length ? (\n              <div>\n                <h4>Vilar</h4>\n                <div className=\"m0 row\">{resting.join(', ')}</div>\n              </div>\n            ) : null}\n          </div>\n        )\n      })}\n      <button disable={loading.toString()} onClick={newRound}>\n        Ny omgång\n      </button>\n    </>\n  )\n}\n","/* eslint-disable no-loop-func, prefer-spread */\n// require('babel-register')\nconst r = require('ramda')\n\nconst noOfGames = (games, player) => {\n  return gamesForPlayer(games, player).length\n}\n\nconst gamesForPlayer = r.curry((games, player) => {\n  return r.filter(g => {\n    return r.contains(player, r.flatten(g))\n  }, games)\n})\n\nconst scoreForGame = ({ settings, game }) => {\n  if (!game[2]) return [0, 0]\n  return r.reduce(\n    (score, set) => {\n      const winner = set[0] > set[1] ? 0 : 1\n      score[winner] = score[winner] + settings.winBonus\n\n      if (settings.onlyCountOwnPoints) {\n        score[0] = score[0] + set[0]\n        score[1] = score[1] + set[1]\n      } else {\n        score[0] = score[0] + set[0] - set[1]\n        score[1] = score[1] + set[1] - set[0]\n      }\n      // console.log('score', score)\n\n      return score\n    },\n    [0, 0],\n    game[2]\n  )\n}\n\nconst scoreForPlayer = ({ settings, games, player }) => {\n  let gameCount = noOfGames(games, player)\n  return gameCount\n    ? r.reduce(\n        (sum, game) => {\n          // console.log(game, 'game')\n          const team = r.contains(player, game[0]) ? 0 : 1\n          const score = scoreForGame({ settings, game })\n          // console.log(sum + score[team])\n          return sum + score[team]\n        },\n        0,\n        gamesForPlayer(games, player)\n      ) / gameCount\n    : 0\n}\n\nconst sortPlayersByScore = ({ settings, games, players }) => {\n  let scoredPlayers = players.map(player => [player, scoreForPlayer({ settings, games, player })])\n\n  return r.sort(([, s1], [, s2]) => s2 - s1, scoredPlayers)\n}\n\nexport const getMatchesPlayed = ({ players, playedGames }) =>\n  players.map(p => noOfGames(playedGames, p))\n\nexport const getScore = ({ settings, playedGames, players }) =>\n  sortPlayersByScore({ settings, games: playedGames, players })\n","import React from 'react'\nimport { getScore } from './scoreCalc'\n\nexport function Results({ rounds, players, settings }) {\n  let results = getScore({ settings, playedGames: rounds.flat(), players })\n  // console.log('results', results)\n\n  return (\n    <div>\n      {results.map(([p, s]) => {\n        return (\n          <div key={p} className=\"row\">\n            {p}: {s}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport function Settings({ settings, setSettings }) {\n  return (\n    <>\n      <div className=\"row c m0\">\n        <div>Antal banor</div>\n        <input\n          type=\"number\"\n          value={settings.courts}\n          onChange={e => {\n            let v = e.target.value\n            setSettings(s => ({ ...s, courts: v }))\n          }}\n        />\n      </div>\n      <div className=\"row c m0\">\n        <div>Poäng för vunnet set</div>\n        <input\n          type=\"number\"\n          value={settings.winBonus}\n          onChange={e => {\n            let v = e.target.value\n            setSettings(s => ({ ...s, winBonus: parseInt(v) }))\n          }}\n        />\n      </div>\n      <div className=\"row c m0\">\n        <div>Antal lottingar per runda</div>\n        <input\n          type=\"number\"\n          style={{ width: '100px' }}\n          value={settings.roundSamples}\n          onChange={e => {\n            let v = e.target.value\n            setSettings(s => ({ ...s, roundSamples: parseInt(v) }))\n          }}\n        />\n      </div>\n      <div className=\"row c m0\">\n        <div>Räkna bara egna poäng</div>\n        <input\n          type=\"checkbox\"\n          checked={settings.onlyCountOwnPoints}\n          onChange={e => {\n            let v = e.target.checked\n            setSettings(s => ({ ...s, onlyCountOwnPoints: v }))\n          }}\n        />\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { Players } from './Players'\nimport { GameOn } from './GameOn'\nimport { Results } from './Results'\nimport { Settings } from './Settings'\nimport './App.css'\nimport { filter } from 'ramda'\nimport createPersistedState from 'use-persisted-state'\nimport { Tabs, TabList, TabPanels, TabPanel, Tab } from '@reach/tabs'\nimport '@reach/tabs/styles.css'\n\nlet useRoundsState = createPersistedState('rounds')\nlet usePlayersState = createPersistedState('players')\nlet useUnavailablePlayersState = createPersistedState('unavailablePlayerss')\nlet useSettingsState = createPersistedState('settings')\n\nfunction App() {\n  let [unavailablePlayers, setUnavailablePlayers] = useUnavailablePlayersState([])\n  let [players, setPlayers] = usePlayersState([])\n  let [settings, setSettings] = useSettingsState({\n    courts: 4,\n    onlyCountOwnPoints: true,\n    winBonus: 10,\n    roundSamples: 1000,\n  })\n  let [rounds, setRounds] = useRoundsState([])\n  let availablePlayers = filter(p => !unavailablePlayers.find(v => v === p), players)\n\n  return (\n    <>\n      <h1 style={{ marginLeft: '20px' }}>Steffes kanna</h1>\n      <Tabs>\n        <TabList>\n          <Tab>Spelare</Tab>\n          <Tab>Matcher</Tab>\n          <Tab>Ställning</Tab>\n          <Tab>Inställningar</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Players\n              players={players}\n              setPlayers={setPlayers}\n              unavailablePlayers={unavailablePlayers}\n              setUnavailablePlayers={setUnavailablePlayers}\n            />\n          </TabPanel>\n          <TabPanel>\n            <GameOn\n              settings={settings}\n              players={players}\n              availablePlayers={availablePlayers}\n              rounds={rounds}\n              setRounds={setRounds}\n            />\n          </TabPanel>\n          <TabPanel>\n            <Results rounds={rounds} players={players} settings={settings} />\n          </TabPanel>\n          <TabPanel>\n            <Settings settings={settings} setSettings={setSettings} />\n\n            <span\n              onClick={e => {\n                e.preventDefault()\n                if (window.confirm('Är du säker?')) {\n                  setPlayers([])\n                  setUnavailablePlayers([])\n                }\n              }}\n            >\n              Rensa alla spelare\n            </span>\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}